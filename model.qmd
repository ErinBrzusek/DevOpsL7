---
title: "Model"
format:
  html:
    code-fold: true
---

```{python}
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing

# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI

# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
```

```{python}
import os
# Get AWS credentials from environment variables
aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID')
aws_secret_access_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
```

## Get Data

```{python}
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()

df.head(3)
```

## Define Model and Fit


```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information


```{python}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

```{python}
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
```

```{python}
import s3fs as s3
from pins import board_s3
from vetiver import vetiver_pin_write
```

## Load Environment

```{python}
from dotenv import load_dotenv

load_dotenv()
```

```{python}
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
```

```{python}
#b = board_folder('data/model', allow_pickle_read=True)

# Create pin
#vetiver_pin_write(b, v, versioned=True)

#v = VetiverModel.from_pin(b, 'penguin_model')
```

```{python}
# Then you can auto-generate a {fastAPI} from this model with
#app = VetiverAPI(v, check_prototype=True)

# Prepare Docker File
#from vetiver import prepare_docker
#prepare_docker(b, "penguin_model")
```


```{python}
# Run the FastAPI server
#app.run(port=8080)
```

```{python}
# Load the Data in Python

#con = connect('my-db.duckdb')
#df = penguins.load_penguins()
#con.execute('CREATE TABLE penguins AS SELECT * FROM df')
#con.close()
```

```{python}
# Use the Database

#con = duckdb.connect('my-db.duckdb')
#df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
#con.close()
```

```{python}
#req_data = {
#  "bill_length_mm": 0,
#  "species_Chinstrap": False,
#  "species_Gentoo": False,
#  "sex_male": False
#}
#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
#res = req.json().get('predict')[0]
```