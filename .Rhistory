#  httr2::req_body_json(
#    list(
#      list(
#        "bill_length_mm" = 0,
#        "species_Chinstrap" = FALSE,
#        "species_Gentoo" = FALSE,
#        "sex_male" = FALSE
#      )
#    )
#  ) |>
#  httr2::req_perform()
#res <- httr2::resp_body_json(req)$predict[[1]]
reticulate::repl_python()
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Run the FastAPI server
app.run(port=8080)
# Load the Data in Python
#con = connect('my-db.duckdb')
#df = penguins.load_penguins()
#con.execute('CREATE TABLE penguins AS SELECT * FROM df')
#con.close()
# Use the Database
#con = duckdb.connect('my-db.duckdb')
#df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
#con.close()
#req_data = {
#  "bill_length_mm": 0,
#  "species_Chinstrap": False,
#  "species_Gentoo": False,
#  "sex_male": False
#}
#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
#res = req.json().get('predict')[0]
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Run the FastAPI server
#app.run(port=8080)
reticulate::repl_python()
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Run the FastAPI server
app.run(port=8080)
quit
shiny::runApp()
reticulate::repl_python()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Prepare Docker File
prepare_docker(b, ‘penguin_model’)
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Prepare Docker File
from vetiver import prepare_docker
prepare_docker(b, ‘penguin_model’)
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Prepare Docker File
from vetiver import prepare_docker
prepare_docker(b, "penguin_model")
quit
runApp()
renv::snapshot()
library(quarto)
install.packages("quarto")
library(quarto)
quarto_render()
quarto_render()
traceback()
renv::snapshot()
quarto_render()
library(quarto)
quarto_render()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
df <- palmerpenguins::penguins
reticulate::repl_python()
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
quarto_render()
library(quarto)
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
df <- palmerpenguins::penguins
library(quarto)
quarto_render()
renv::snapshot()
install.packages("rmarkdown")
renv::install("rmarkdown")
install.packages("renv")
renv::snapshot()
renv::status
reticulate::repl_python()
df = penguins.load_penguins().dropna()
df.head(3)
renv::snapshot()
quit
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
renv::snapshot()
renv::snapshot()
install.packages("knitr")
install.packages("rmarkdown")
renv::snapshot()
install.packages("rmarkdown")
renv::snapshot()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
library(rmarkdown)
df <- palmerpenguins::penguins
reticulate::repl_python()
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
import sf3s
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
import s3fs
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
import s3fs
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
#import s3fs
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
#import s3fs
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
import s3fs as s3
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
import s3fs as s3
py -m pip install s3fs
install s3fs
import s3fs as s3
import reticulate
reticulate::repl_python()
import s3fs as s3
from pins import board_s3
from vetiver import vetiver_pin_write
# Establish AWS Credentials
import boto3
# Configure AWS credentials
boto3.setup_default_session(
aws_access_key_id="AKIAXYKJWTM4BOYN4UYW",
aws_secret_access_key="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",
region_name="us-east-1"
)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
# Establish AWS Credentials
import boto3
# Configure AWS credentials
boto3.setup_default_session(
aws_access_key_id="AKIAXYKJWTM4BOYN4UYW",
aws_secret_access_key="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",
region_name="us-east-1"
)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Establish AWS Credentials
import boto3
# Configure AWS credentials
boto3.setup_default_session(
aws_access_key_id="AKIAXYKJWTM4BOYN4UYW",
aws_secret_access_key="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",
region_name="us-east-1"
)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
import s3fs as s3
from pins import board_s3
from vetiver import vetiver_pin_write
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
quit
# Set AWS credentials
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAXYKJWTM4BOYN4UYW")
Sys.setenv("AWS_SECRET_ACCESS_KEY" = "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")
Sys.setenv("AWS_REGION" = "us-east-1")
reticulate::repl_python()
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
import os
# Set AWS credentials and region as environment variables
os.environ['AWS_ACCESS_KEY_ID'] = "AKIAXYKJWTM4BOYN4UYW"
os.environ['AWS_SECRET_ACCESS_KEY'] = "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"
os.environ['AWS_REGION'] = 'us-east-1'
# Establish AWS Credentials
import boto3
# Configure AWS credentials
boto3.setup_default_session(
aws_access_key_id="AKIAXYKJWTM4BOYN4UYW",
aws_secret_access_key="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",
region_name="us-east-1"
)
import os
# Set AWS credentials and region as environment variables
os.environ['AWS_ACCESS_KEY_ID'] = "AKIAXYKJWTM4BOYN4UYW"
os.environ['AWS_SECRET_ACCESS_KEY'] = "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"
os.environ['AWS_REGION'] = 'us-east-1'
board = board_s3("do4ds-lab-brzusek", allow_pickle_read=True)
vetiver_pin_write(board, v)
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
library(rmarkdown)
library(aws.s3)
df <- palmerpenguins::penguins
# Set AWS credentials
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAXYKJWTM4BOYN4UYW")
Sys.setenv("AWS_SECRET_ACCESS_KEY" = "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")
Sys.setenv("AWS_REGION" = "us-east-1")
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
library(rmarkdown)
library(aws.s3)
df <- palmerpenguins::penguins
# Set AWS credentials
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAXYKJWTM4BOYN4UYW")
Sys.setenv("AWS_SECRET_ACCESS_KEY" = "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")
Sys.setenv("AWS_REGION" = "us-east-1")
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
install.packages("paws")
reticulate::repl_python()
exit
quit
