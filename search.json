[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to Penguins EDA (Exploratory Data Analysis) and Modeling page! Here, we delve into the fascinating world of penguins, exploring the intricate relationships between their physical characteristics, such as size and mass, across different species and sexes. This project leverages the rich dataset provided by the palmerpenguins package, offering a closer look at these creatures through various statistical and machine learning techniques.\n\nPenguin Size and Mass Analysis\nUtilizing the R programming language, we start by examining the average size and mass of penguins by species and sex. This initial analysis provides insights into the natural variations within these captivating creatures, utilizing dplyr for data manipulation and ggplot2 for visualization. Our exploration includes creating summaries and visual plots that highlight the differences in bill length and body mass among the species.\n\n\nData and Modeling\nWe then load and clean the penguin data, then fit a linear regression model to predict the body mass of penguins based on features like bill length, species, and sex. This part of the project showcases the application of machine learning techniques to understand and predict aspects of the natural world.\n\n\nTools and Technologies\nThroughout this exploration, we use a variety of tools and libraries, including:\n\nR Libraries: palmerpenguins, dplyr, ggplot2, DBI, duckdb, dbplyr, httr2, and rmarkdown for data analysis, visualization, and reporting.\nPython Libraries: pandas, numpy, sklearn for data manipulation and machine learning, along with vetiver and pins for model deployment and versioning.\nDatabase and API Integration: Demonstrations of integrating with a DuckDB database and utilizing APIs for model predictions.\n\n\n\nPurpose and Learning\nThe primary aim of this page is to provide an accessible, educational exploration into data science and machine learning through a real-world data set. By bridging R and Python, it serves as a guide for those interested in the interdisciplinary nature of data science."
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\n# Chapter 1 Dependencies\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n\n# Chapter 2 Dependencies\nfrom vetiver import VetiverModel\nfrom pins import board_folder\nfrom pins import board_temp\nfrom vetiver import vetiver_pin_write\nfrom vetiver import VetiverAPI\n\n# Chapter 3 Dependencies\nimport requests\nimport duckdb\nfrom duckdb import connect"
  },
  {
    "objectID": "model.html#get-data",
    "href": "model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "model.html#define-model-and-fit",
    "href": "model.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model.html#get-some-information",
    "href": "model.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n\n\n\n\nCode\nimport s3fs as s3\nfrom pins import board_s3\nfrom vetiver import vetiver_pin_write"
  },
  {
    "objectID": "model.html#load-environment",
    "href": "model.html#load-environment",
    "title": "Model",
    "section": "Load Environment",
    "text": "Load Environment\n\n\nCode\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n\nFalse\n\n\n\n\nCode\n# AWS Pin\n\n#board = board_s3(\"do4ds-lab-brzusek\", allow_pickle_read=True)\n#vetiver_pin_write(board, v)\n\n\n\n\nCode\nb = board_folder('data/model', allow_pickle_read=True)\n\n# Create pin\nvetiver_pin_write(b, v, versioned=True)\n\n#v = VetiverModel.from_pin(b, 'penguin_model')\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240415T192731Z-565d5\n\n\n\n\nCode\n# Then you can auto-generate a {fastAPI} from this model with\n#app = VetiverAPI(v, check_prototype=True)\n\n# Prepare Docker File\n#from vetiver import prepare_docker\n#prepare_docker(b, \"penguin_model\")\n\n\n\n\nCode\n# Run the FastAPI server\n#app.run(port=8080)\n\n\n\n\nCode\n# Load the Data in Python\n\n#con = connect('my-db.duckdb')\n#df = penguins.load_penguins()\n#con.execute('CREATE TABLE penguins AS SELECT * FROM df')\n#con.close()\n\n\n\n\nCode\n# Use the Database\n\n#con = duckdb.connect('my-db.duckdb')\n#df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n#con.close()\n\n\n\n\nCode\n#req_data = {\n#  \"bill_length_mm\": 0,\n#  \"species_Chinstrap\": False,\n#  \"species_Gentoo\": False,\n#  \"sex_male\": False\n#}\n#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])\n#res = req.json().get('predict')[0]"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\n# install.packages(\"paws\")\n\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(dbplyr)\n\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\n\nCode\nlibrary(httr2)\nlibrary(rmarkdown)\n#library(aws.s3)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\n# Create an S3 client, then list the objects within bucket\n#s3 &lt;- paws::s3()\n#s3$list_objects(Bucket = \"do4ds-lab-brzusek\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\n# install.packages(\"paws\")\n\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(dbplyr)\n\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\n\nCode\nlibrary(httr2)\nlibrary(rmarkdown)\n#library(aws.s3)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\n# Create an S3 client, then list the objects within bucket\n#s3 &lt;- paws::s3()\n#s3$list_objects(Bucket = \"do4ds-lab-brzusek\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-vs-mass-by-species",
    "href": "eda.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load the Data\n\n#con &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = #\"my-db.duckdb\")\n#DBI::dbWriteTable(con, \"penguins\", #palmerpenguins::penguins)\n#DBI::dbDisconnect(con)\n\n\n\n\nCode\n# Use the Database\n\n#con &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")\n#df &lt;- dplyr::tbl(con, \"penguins\")\n\n#DBI::dbDisconnect(con)\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\n\n\n\n\n\nCode\n#req &lt;- httr2::request(\"http://127.0.0.1:8080/predict\") |&gt;\n#  httr2::req_body_json(\n#    list(\n#      list(\n#        \"bill_length_mm\" = 0,\n#        \"species_Chinstrap\" = FALSE,\n#        \"species_Gentoo\" = FALSE,\n#        \"sex_male\" = FALSE\n#      )\n#    )\n#  ) |&gt;\n#  httr2::req_perform()\n#res &lt;- httr2::resp_body_json(req)$predict[[1]]"
  }
]